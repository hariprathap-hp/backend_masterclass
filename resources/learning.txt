git repo:
    -> https://github.com/techschool/simplebank

migrate command
    -> migrate create -ext sql -dir db/migration -seq init_schema

executing migrate command
    -> migrate -path db/migration -database "postgresql://postgres:postgres@localhost:8000/simple_bank?sslmode=disable" -verbose up

Different libraries to access database from goLang?
    -> GORM, database/sql (default), sqlx, sqlc

sqlc queries page
    -> https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html

To save:
--------
func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Accounts,error ){
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Balance)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}


func (q *Queries)  AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Accounts, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i Accounts
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

Another example of database transaction in goLang?
	-> https://www.sohamkamani.com/golang/sql-transactions/

BEGIN;

INSERT INTO transfers ( from_account_id, to_account_id, amount ) VALUES ( 1,2,10 ) RETURNING *;

INSERT INTO entries (  account_id,   amount ) VALUES ( 1, -10 ) RETURNING *;
INSERT INTO entries (  account_id,   amount ) VALUES ( 2, 10 ) RETURNING *;

SELECT * FROM accounts WHERE id = 1 FOR UPDATE;
UPDATE accounts SET balance=90 WHERE id=1 returning *;

SELECT * FROM accounts WHERE id = 2 FOR UPDATE;
UPDATE accounts SET balance=110 WHERE id=1 returning *;

ROLLBACK;

CI/CD Tools:
------------
Gitlab:
	-> Workflow -> Jobs -> Steps -> Actions

	-> Each job will be run by a separate runner which will report all info to gitlab

Errors:
-------
Mockgen reflection error solution is a workaround found in the link below,
	-> https://dev.to/acetorscode/comment/1f1ma